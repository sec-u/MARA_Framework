===========
Androguard
===========

Step 1: Run this command in terminal	
./androlyze.py -s

Step 2: This command will start own input prompt, waiting for input.
Now let’s define the path of apk and type of decompiler we want to use to decompile the app.
Input this command into the prompt and replace path_to_apk with path of the apk we want to analyse.	
a,d,dx = AnalyzeAPK("path_to_apk", decompiler="dad")

Depending on the apk, it might take some time to execute and after successful execution of command, it will prompt for APK or DVM specific commands.

Let’s examine list of all Activities in the app. Enter this command in input prompt, it will display all activities in app as output.	
a.get_activities()

To get list of all permissions as output, input this command:	
a.get_permissions()

To get list of all class names as output, input this command:	
d.get_classes_names()

To get list of all strings defined in app as output, input this command:	
d.get_strings()

To get list of all methods in a class as output, input this command:	
d.get_methods()

	
a.get_package()
 
a.get_app_name()

a.get_main_activity()

d.get_classes_names()

a.get_receivers()

==========
Androaxml
==========
Viewing AndroidManifest.xml is most important part of reverse engineering. Using Androaxml tool of Androguard, we can easily fetch the AndroidManifest.xml file. It actually converts android’s binary XML (i.e. AndroidManifest.xml file) into the classic XML file, that is human readable.

Simply run this command:	
./androaxml.py -i <path_of_apk>  -o <name_of_output_file> </code>

In our case, we have RTU-info.apk and output.xml will be output file generated, contains Manifest.xml.	
./androaxml.py -i RTU-Info.apk  -o output.xml

=========
Androsim
=========
In case of Linux users, navigate to androguard folder and run this command to check similarities between two apks: Circle and Circle1
python androsim.py -i circle.apk circle1.apk -c ZLIB -n

This tool helps to detected Identical, Similar, New, Deleted, Skipped methods. And also score from 0 to 10 scale is shown showing % of similarities.
    -c specifies the type of compressor (BZ2, ZLIB, SNAPPY, LZMA, XZ).
    -d can be used to display methods name as output.
	
python androsim.py -i circle.apk circle1.apk -c ZLIB -n -d

========
Androdd
========
Dump all methods of all class files in an Android Package

To dump graphical outputs of all methods of all the classes in an android package, we use Androdd.py tool which comes out of box in Androguard.

Navigate to Androguard folder and run androdd.py file with input file and output folder arguments.	
./androdd.py -i <path_of_apk> -o <path_of_output_directory>

In this tutorial we have “circle.apk” a demo input app and “dd” as output directory.	
python androdd.py -i circle2.apk -o ./dd
OR	
./androdd.py -i circle2.apk -o ./dd

Now check out dd directory, graphical output of all methods will be generated as a .ag file, along with all java files. If we want output graphics file in .png format, just pass -f png as argument.	
python androdd.py -i circle2.apk -o ./dd -f png
OR	
./androdd.py -i circle2.apk -o ./dd -f png

=============
Androapkinfo
=============
Displays complete information about apk file

Androapkinfo displays Files, Permissions, Main Activity, All Activities, Services, Obfuscation related information at once! This tool is same as the Androlyze tool, for which we talked about in Part 1, provided this displays all information at one go!	
python androapkinfo.py -i <path_of_first_apk>
OR	
./androapkinfo.py -i <path_of_first_apk>
































